name: Jeonse-ive CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Git checkout
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Create .env file from GitHub Secrets
      - name: Create env files
        run: |
          mkdir -p env
          echo "${{ secrets.ENV_VARS }}" > env/prod.env
          echo "[LOCAL] prod.env 생성됨:"
          ls -l env/
          file env/prod.env || echo "[LOCAL] file 명령어 실패"

      # 3. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # 4. Grant permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Build with Gradle (excluding tests)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 6. Docker build
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest .

      # 7. DockerHub login
      - name: DockerHub Login
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 8. Push Docker Image to DockerHub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest

      # 9. EC2 접속 - app 디렉터리 생성
      - name: SSH to EC2 - Create app directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/${{ secrets.SERVER_USERNAME }}/app
            echo "[EC2] /app 디렉터리 생성 완료"
            ls -ld /home/${{ secrets.SERVER_USERNAME }}/app

      # 10. docker-compose 파일 전송
      - name: Copy docker-compose.prod.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "/home/${{ secrets.SERVER_USERNAME }}/app"

      # ✅ (10.5) 수동 scp로 .env 파일 전송
      - name: Manually copy .env file to EC2 using scp
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          scp -i key.pem -o StrictHostKeyChecking=no env/prod.env ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USERNAME }}/jeonse-ive/.env
        env:
          SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}

      # ✅ (10.6) EC2에서 .env 파일 상태 확인
      - name: Debug .env on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/${{ secrets.SERVER_USERNAME }}/jeonse-ive
            echo "[EC2] .env 상태:"
            if [ -f ".env" ]; then echo "✅ .env는 정상 파일입니다."; else echo "❌ .env 파일이 존재하지 않습니다."; fi
            echo "[EC2] .env 내용:"
            cat .env || echo "(파일 읽기 실패)"

      # 11. Docker Compose로 컨테이너 재배포
      - name: Deploy on EC2 with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/${{ secrets.SERVER_USERNAME }}/app
            echo "[EC2] 도커 이전 컨테이너 정리 중..."
            docker compose -f docker-compose.prod.yml down || true

            echo "[EC2] 이미지 정리 중..."
            docker image prune -a -f

            echo "[EC2] 최신 이미지 Pull 중..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest

            echo "[EC2] docker-compose 실행 중..."
            docker compose -f docker-compose.prod.yml up -d

      # 12. 실행중인 컨테이너 확인
      - name: Show running containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "[EC2] 현재 실행 중인 컨테이너:"
            docker ps
