name: dreamme CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Git checkout
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Create .env file from GitHub Secrets
      - name: Create env files
        run: |
          mkdir -p env
          echo "${{ secrets.ENV_VARS }}" > env/prod.env

      # 3. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # 4. Gradle 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Build with Gradle (test 제외)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 6. Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest .

      # 7. DockerHub 로그인
      - name: DockerHub Login
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 8. Docker 이미지 푸시
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest

      # 9. EC2 접속 - 디렉토리 및 파일 전송
      - name: SSH to EC2 - Create app directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: mkdir -p /home/${{ secrets.SERVER_USERNAME }}/app

      - name: Copy docker-compose.prod.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "/home/${{ secrets.SERVER_USERNAME }}/app"

      - name: Copy .env file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "env/prod.env"
          target: "/home/${{ secrets.SERVER_USERNAME }}/app/.env"

      # 10. EC2 서버에서 컨테이너 실행
      - name: Deploy on EC2 with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/${{ secrets.SERVER_USERNAME }}/app
            docker compose -f docker-compose.prod.yml down || true
            docker image prune -a -f
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest
            docker compose -f docker-compose.prod.yml up -d

      # 11. 확인용 로그 출력
      - name: Show running containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: docker ps
